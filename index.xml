<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hierarchical Information Model</title>
    <link>https://covesa.github.io/hierarchical_information_model/</link>
    <description>Recent content on Hierarchical Information Model</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Aug 2019 13:05:11 +0200</lastBuildDate><atom:link href="https://covesa.github.io/hierarchical_information_model/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basic Rules</title>
      <link>https://covesa.github.io/hierarchical_information_model/common_rule_set/basics/</link>
      <pubDate>Sun, 04 Aug 2019 13:05:11 +0200</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/common_rule_set/basics/</guid>
      <description>Specification format The syntax used to define the content of a HIM taxonomy is based on YAML and must comply to the YAML specification.
A HIM taxonomy may contain subtrees that are identical copies of each other, for example descriptions of doors in a vehicle. In order not to have to repeat the content of the subtree multiple times, the subtree can be defined in a separate file, which can then be included into the main tree by the directive</description>
    </item>
    
    <item>
      <title>Data</title>
      <link>https://covesa.github.io/hierarchical_information_model/resource_data_rule_set/basics/</link>
      <pubDate>Sun, 04 Aug 2019 13:05:11 +0200</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/resource_data_rule_set/basics/</guid>
      <description>It is the leaf nodes of a tree that represents and defines the actual data. The definition is expressed by metadata describing the data associated to the node.
Node Types The node types for representing data entries are:
Sensor Actuator Attribute Please see the respective chapters for more information about these node types.</description>
    </item>
    
    <item>
      <title>Service Data Model</title>
      <link>https://covesa.github.io/hierarchical_information_model/service_data_rule_set/basics/</link>
      <pubDate>Sun, 04 Aug 2019 13:05:11 +0200</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/service_data_rule_set/basics/</guid>
      <description>HIM Service-Data Tree A HIM service data tree contains a taxonomy of microservice declarations. The tree structure is used to create a sets of microservices. Such as set is named Service, or Service Group for larger sets where a set of Service Groups would then form a Service, see the figure below, or the example service data tree.
*Figure x. HIM service tree structure
HIM Microservice Data A microservice is in HIM defined by a procedure signature as shown below:</description>
    </item>
    
    <item>
      <title>HIM Configuration Rules</title>
      <link>https://covesa.github.io/hierarchical_information_model/configuration_rule_set/basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/configuration_rule_set/basics/</guid>
      <description>Configuration Overview HIM supports structuring information into different trees instead of bundling it all into one tree. This is likely to lead to that e. g. a server that manages a super domain of somewhat heterogeneous information will have that information represented by multiple trees. HIM enables this &amp;ldquo;forest of trees&amp;rdquo; to be accessed in a homogeneous manner by using the paths of the nodes of the trees to address theinformation contained in the trees.</description>
    </item>
    
    <item>
      <title>Type Definition Model</title>
      <link>https://covesa.github.io/hierarchical_information_model/type_definition_rule_set/basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/type_definition_rule_set/basics/</guid>
      <description>A type_definition tree contains data type definitions that are not part of the primitive datatypes defined by HIM.
The currently supported node types are suited for definition of structs.
Node Types The node types for representing type definitions are:
Branch Struct Property Please see more information about these node types here.</description>
    </item>
    
    <item>
      <title>Instances</title>
      <link>https://covesa.github.io/hierarchical_information_model/common_rule_set/instances/</link>
      <pubDate>Wed, 31 Jul 2019 15:27:36 +0200</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/common_rule_set/instances/</guid>
      <description>It is not uncommon that when defining HIM taxonomies there is a need to repeat branches and data entries when multiple instances of the same object occurs. One mechanism to handle that is the include directive, but that does not solve how to compactly describe a branch structure that uniquely enumerates multiple includes. To avoid hard-coded repetitions of branches and data entries in the specification an instance-concept is supported. Instances remove the need of repeating definitions, by defining at the node itself how often it occurs in the resulting tree.</description>
    </item>
    
    <item>
      <title>Includes</title>
      <link>https://covesa.github.io/hierarchical_information_model/common_rule_set/includes/</link>
      <pubDate>Sun, 04 Aug 2019 12:59:44 +0200</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/common_rule_set/includes/</guid>
      <description>An include directive in a HIM file will read the file it refers to and the contents of that file will be inserted into the current buffer in place of the include directive. The included file will, in its turn, be scanned for include directives to be replaced, effectively allowing formation of a tree of includedfiles.
See the figurefor an example of such a tree.
Figure: Include directives
The include directive has the following format:</description>
    </item>
    
    <item>
      <title>Datatypes</title>
      <link>https://covesa.github.io/hierarchical_information_model/common_rule_set/data_entry/datatypes/</link>
      <pubDate>Sun, 04 Aug 2019 11:11:48 +0200</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/common_rule_set/data_entry/datatypes/</guid>
      <description>HIM supports the datatype concepts:
primitive datatypes, composite datatypes, arrays. This chapter also mentions the related concepts of Timestamps, and Data streams.
Primitive datatypes The list below shows the primitive datatypes that are supported.
Name Description Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.</description>
    </item>
    
    <item>
      <title>Structs Explained</title>
      <link>https://covesa.github.io/hierarchical_information_model/common_rule_set/data_entry/structs/</link>
      <pubDate>Sun, 04 Aug 2019 11:11:48 +0200</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/common_rule_set/data_entry/structs/</guid>
      <description>As mentioned in the chapter Composite datatypes a struct is defined using the node types &amp;lsquo;struct&amp;rsquo; and &amp;lsquo;property&amp;rsquo; in trees having the information type TypeDefinition, and it is referred to by using its path.
The struct node type can also be used in trees having the information type Service, which is described in HIM Services Rule Set.
A struct definition in a Typedefinition tree can contain a member that has a different struct as its datatype.</description>
    </item>
    
    <item>
      <title>Units</title>
      <link>https://covesa.github.io/hierarchical_information_model/common_rule_set/data_entry/units/</link>
      <pubDate>Sun, 04 Aug 2019 12:36:12 +0200</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/common_rule_set/data_entry/units/</guid>
      <description>Introduction to Units HIM keeps a list of the units of measurements that can be used as the value of the unit metadata, see the example below.
Vehicle.Speed: datatype: float type: sensor unit: km/h description: Vehicle speed. Data that has an associated unit from the list shall declare it using the unit metadata. It is allowed for a domain to specify an additional list with domain specific units that complement the common units list.</description>
    </item>
    
    <item>
      <title>Actuator node</title>
      <link>https://covesa.github.io/hierarchical_information_model/resource_data_rule_set/actuator/</link>
      <pubDate>Sun, 04 Aug 2019 12:37:03 +0200</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/resource_data_rule_set/actuator/</guid>
      <description>Actuators are used to control the desired value of a property. Some properties in a vehicle cannot change instantly. A typical example is position of a seat or a window. Reading a value of an actuator shall return the current actual value, e.g. the current position of the seat, rather than the wanted/desired position. A typical example could be if someone wants to change the position of a seat from 0 to 100.</description>
    </item>
    
    <item>
      <title>Branch node</title>
      <link>https://covesa.github.io/hierarchical_information_model/common_rule_set/node_types/branch/</link>
      <pubDate>Sun, 04 Aug 2019 12:37:03 +0200</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/common_rule_set/node_types/branch/</guid>
      <description>The interior of a HIM tree is built up of nodes that have the node type branch.
Nodes of the type branch must have the following mandatory metadata:
Name Type Description For more information, see the Common Rule Set: Mandatory Metadata.
Besides the mandatory metadata mentioned above, the following optional metadata may be used
Comment Instances Aggregate For more information, please see the Common Rule Set: Optional Metadata.
The root node of a HIM tre must be of the node type branch.</description>
    </item>
    
    <item>
      <title>IO-struct node</title>
      <link>https://covesa.github.io/hierarchical_information_model/service_data_rule_set/iostruct/</link>
      <pubDate>Sun, 04 Aug 2019 12:37:03 +0200</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/service_data_rule_set/iostruct/</guid>
      <description>An iostruct node type may be used to encapsulate multiple data points that have the relationship that they are all representing either Input parameters or Output parameters of the microservice that they are linked to.
This node type is only allowed in trees of the information type servicedata. For more information, please see respective parts of this document.
An iostruct node must have one of the two names Input or Output.</description>
    </item>
    
    <item>
      <title>Property node</title>
      <link>https://covesa.github.io/hierarchical_information_model/service_data_rule_set/property/</link>
      <pubDate>Sun, 04 Aug 2019 12:37:03 +0200</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/service_data_rule_set/property/</guid>
      <description>Data represented by the node type property have a relationship to any other data having the same iostruct parent in that they are all sampled in an &amp;ldquo;atomic&amp;rdquo; operation, i.e. the set of data points have the same timestamp representing the sample time.
Nodes of the type property must have the following mandatory metadata:
Name Type Datatype Description For more information, see the Common Rule Set: Mandatory Metadata.
Besides the mandatory metadata mentioned above, the following optional metadata may be used</description>
    </item>
    
    <item>
      <title>Property node</title>
      <link>https://covesa.github.io/hierarchical_information_model/type_definition_rule_set/property/</link>
      <pubDate>Sun, 04 Aug 2019 12:37:03 +0200</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/type_definition_rule_set/property/</guid>
      <description>Data represented by the node type property have a relationship to any other data having the same struct parent in that they are all sampled in an &amp;ldquo;atomic&amp;rdquo; operation, i.e. the set of data points have the same timestamp representing the sample time.
Nodes of the type property must have the following mandatory metadata:
Name Type Datatype Description For more information, see the Common Rule Set: Mandatory Metadata.
Besides the mandatory metadata mentioned above, the following optional metadata may be used</description>
    </item>
    
    <item>
      <title>Sensor node</title>
      <link>https://covesa.github.io/hierarchical_information_model/resource_data_rule_set/sensor/</link>
      <pubDate>Sun, 04 Aug 2019 12:37:03 +0200</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/resource_data_rule_set/sensor/</guid>
      <description>Sensors are signals to read values of properties in a vehicle. Values of sensors typically change over time. Reading a sensor shall return the current actual value of the related property, e.g. the current speed or the current position of the seat.
Nodes of the type sensor must have the following mandatory metadata:
Name Type Datatype Description For more information, see the Common Rule Set: Mandatory Metadata.
Besides the mandatory metadata mentioned above, the following optional metadata may be used</description>
    </item>
    
    <item>
      <title>Struct node</title>
      <link>https://covesa.github.io/hierarchical_information_model/type_definition_rule_set/struct/</link>
      <pubDate>Sun, 04 Aug 2019 12:37:03 +0200</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/type_definition_rule_set/struct/</guid>
      <description>A struct node type may be used to represent multiple data points that have the relationship that they are always sampled in an &amp;ldquo;atomic&amp;rdquo; operation, i. e. the set of samples have the same timestamp. An example of such a set of data points are the GPS dta points latitude, longitude, height.
This node type is only allowed in trees of the information types typedefinition or service. For more information, please see respective parts of this document.</description>
    </item>
    
    <item>
      <title>procedure node</title>
      <link>https://covesa.github.io/hierarchical_information_model/service_data_rule_set/procedure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/service_data_rule_set/procedure/</guid>
      <description>The procedure node type must have the following mandatory metadata:
Name Type Description For more information, see the Common Rule Set: Mandatory Metadata.
Besides the mandatory metadata mentioned above, the following optional metadata may be used
Comment For more information, please see the Common Rule Set: Optional Metadata.
A parent must be of the node type branch. Children, if any, must be of the node type iostruct. An example of the specification of a procedure node is given below.</description>
    </item>
    
    <item>
      <title>Property node</title>
      <link>https://covesa.github.io/hierarchical_information_model/common_rule_set/node_types/property/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/common_rule_set/node_types/property/</guid>
      <description>The property node type is used in both the service and typedefinition rule sets, but as they differ slightly on the semantics in respective rule set it has a separate definition in each of the rule sets, please see their definitions in the Service Rule Set:Property node node type and the Type Definition Rule Set:Property node node type respectively.</description>
    </item>
    
    <item>
      <title>Proxy node</title>
      <link>https://covesa.github.io/hierarchical_information_model/configuration_rule_set/node_types/proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/configuration_rule_set/node_types/proxy/</guid>
      <description>A proxy node in a HIM configuration file defines a tree that the server managing this forest does not have a local copy of. It however knows how to forward requests to the server that managaes the tree and has a local copy of it. An example could be a home automation scenario, where a server deployed in a car knows the Local Area Network access point address bearer type, so that when in proximity of the LAN, and after the vehicle has connected to it, requests received by the HIM server in he vehicle can then be routed to the server deployed on the LAN.</description>
    </item>
    
    <item>
      <title>Symlink node</title>
      <link>https://covesa.github.io/hierarchical_information_model/service_data_rule_set/symlink/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/service_data_rule_set/symlink/</guid>
      <description>Data represented by the node type symlink have a relationship to any other data having the same iostruct parent in that they are all representing either Input parameters or Output parameters of the service that they are linked to.
An Otput parameter declared as a symlink will lead to that the returned value is read from that data point.
An Input parameter declared as a symlink will lead to that the provided input value is written to that data point.</description>
    </item>
    
    <item>
      <title>Taxonomy node</title>
      <link>https://covesa.github.io/hierarchical_information_model/configuration_rule_set/node_types/taxonomy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/configuration_rule_set/node_types/taxonomy/</guid>
      <description>A taxonomy node in a HIM configuration file defines a tree that the server managing this forest have a local and complete copy of. This means that the server can efficiently parse the tree to e. g. verify that a client request for information points to an existing node in the tree.
Nodes of the type taxonomy must have the following mandatory metadata:
Name Type Domain Version Local Description For more information, see the Common Rule Set: Mandatory Metadata.</description>
    </item>
    
    <item>
      <title>Attribute node</title>
      <link>https://covesa.github.io/hierarchical_information_model/resource_data_rule_set/attribute/</link>
      <pubDate>Sun, 04 Aug 2019 12:37:31 +0200</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/resource_data_rule_set/attribute/</guid>
      <description>Nodes of the types attribute must have the following mandatory metadata:
Name Type Datatype Default Description For more information, see the Common Rule Set: Mandatory Metadata.
Besides the mandatory metadata mentioned above, the following optional metadata may be used
Unit Comment For more information, please see the Common Rule Set: Optional Metadata.
This node type must have a node of type branch as parent, and must not have any children.</description>
    </item>
    
    <item>
      <title>Value Restrictions</title>
      <link>https://covesa.github.io/hierarchical_information_model/common_rule_set/data_entry/value_restrictions/</link>
      <pubDate>Sun, 04 Aug 2019 12:37:12 +0200</pubDate>
      
      <guid>https://covesa.github.io/hierarchical_information_model/common_rule_set/data_entry/value_restrictions/</guid>
      <description>HIM supports the following metadata for restricting the valid values of data.
min max allowed Min The minimum value, within the interval of the given datatype, that the data entry can be assigned. If omitted, the minimum value will be the “Min” value for the given datatype. The min restrictions can only be used data having a &amp;ldquo;number&amp;quot;datatype (intx, uintx, float, double). Must not be specified if allowed is defined in the same node.</description>
    </item>
    
  </channel>
</rss>
